df <- haven::read_sas("Study 1.sav")
setwd("C:/Dropbox/PERSO/github/InteroceptiveAccuracyScale")
df <- haven::read_sas("Study 1.sav")
df <- haven::read_sav("Study 1.sav")
names(df)
report::report_participants(df, age = "Age", gender = "Gender")
df
df <- haven::read_sav("Study 1.sav") |>
mutate(Gender = as.factor(Gender))
library(tidyverse)
library(easystats)
df <- haven::read_sav("Study 1.sav") |>
mutate(Gender = as.factor(Gender))
head(df)
df <- haven::read_sav("Study 1.sav") |>
mutate(Gender = fct_recode(Gender, "Male" = 1, "Female" = 2))
df <- haven::read_sav("Study 1.sav") |>
mutate(Gender = fct_recode(as.factor(Gender), "Male" = 1, "Female" = 2))
df <- haven::read_sav("Study 1.sav") |>
mutate(Gender = fct_recode(as.character(Gender), "Male" = 1, "Female" = 2))
df <- haven::read_sav("Study 1.sav") |>
mutate(Gender = fct_recode(as.factor(Gender), "Male" = "1", "Female" = "2"))
head(df)
report::report_participants(df, age = "Age", gender = "Gender")
haven::read_sav("Study 1.sav") |>
mutate_all(as.numeric)
df <- haven::read_sav("Study 1.sav") |>
mutate_all(as.numeric) |>
mutate(Gender = fct_recode(as.factor(Gender), "Male" = "1", "Female" = "2")) |>
report::report_participants(df, age = "Age", gender = "Gender")
haven::read_sav("Study 1.sav") |>
mutate_all(as.numeric)
df <- haven::read_sav("Study 1.sav") |>
mutate_all(as.numeric)
summary(df)
df <- haven::read_sav("Study 1.sav") |>
mutate_all(as.numeric) |>
mutate(Gender = fct_recode(as.charcter(Gender), "Male" = "1", "Female" = "2")) |>
report::report_participants(df, age = "Age", gender = "Gender")
df <- haven::read_sav("Study 1.sav") |>
mutate_all(as.numeric) |>
mutate(Gender = fct_recode(as.character(Gender), "Male" = "1", "Female" = "2")) |>
report::report_participants(df, age = "Age", gender = "Gender")
df <- haven::read_sav("Study 1.sav") |>
mutate_all(as.numeric) |>
mutate(Gender = fct_recode(as.character(Gender), "Male" = "1", "Female" = "2"))
df
report::report_participants(df, age = "Age", gender = "Gender")
df <- haven::read_sav("Study 1.sav") |>
mutate_all(as.numeric) |>
mutate(Gender = fct_recode(as.character(Gender), "Male" = "1", "Female" = "2"))
df <- haven::read_sav("Study 1.sav") |>
mutate_all(as.numeric) |>
mutate(Gender = as.character(ifelse(Gender == 1, "Male", "Female")))
report::report_participants(df, age = "Age", gender = "Gender")
report::report_participants(df, age = "Age", sex = "Gender")
report::report_participants(df, age = "Age", sex = "Gender", gender = NA)
report::report_participants(df, age = "Age", gender = "Gender")
report::report_participants(df, age = "Age", sex = NA, gender = "Gender")
data <- select(df, -Age, -Gender)
names(data)
parameters::n_factors(data)
n <- parameters::n_factors(data)
plot(n)
efa <- parameters::factor_analysis(data)
efa
efa <- parameters::factor_analysis(data, sort = TRUE)
efa
efa <- parameters::factor_analysis(data, n=1, sort = TRUE)
efa
efa <- parameters::factor_analysis(data, n=4, sort = TRUE)
efa
efa <- parameters::factor_analysis(data, n=4, rotation = "oblimin", sort = TRUE)
efa
cfa1 <- lavaan::cfa("IAS ~ .", data=data)
cfa1 <- lavaan::cfa("IAS =~ .", data=data)
names(data)
paste(names(data), collapse = "+")
paste(names(data), collapse = " + ")
efa1 <- parameters::factor_analysis(data, n=1, sort = TRUE)
efa1
parameters::efa_to_cfa(efa1)
cfa1 <- lavaan::cfa(parameters::efa_to_cfa(efa1), data=data)
cfa4 <- lavaan::cfa(parameters::efa_to_cfa(efa4), data=data)
efa4 <- parameters::factor_analysis(data, n=4, rotation = "oblimin", sort = TRUE)
cfa4 <- lavaan::cfa(parameters::efa_to_cfa(efa4), data=data)
parameters::efa_to_cfa(efa4)
efa4
parameters::efa_to_cfa(efa4, threshold = "max")
cfa4 <- lavaan::cfa(parameters::efa_to_cfa(efa4, threshold = "max"), data=data)
anova(cfa1, cfa4)
cfa1 <- lavaan::cfa(parameters::efa_to_cfa(efa1), data=data)
cfa4 <- lavaan::cfa(parameters::efa_to_cfa(efa4, threshold = "max"), data=data)
cfa1
cfa4
anova(cfa1, cfa4)
library(lavaan)
anova(cfa1, cfa4)
efa4 <- parameters::factor_analysis(data, n=4, rotation = "oblimin", sort = TRUE)
efa4
parameters::parameters(cfa4)
parameters::parameters(cfa4) |>
display()
tidySEM::graph_sem(cfa4)
library(tidySEM)
tidySEM::graph_sem(cfa4)
cfa1 <- lavaan::cfa(parameters::efa_to_cfa(efa1, names="IAS"), data=data)
efa4
cfa4 <- lavaan::cfa(parameters::efa_to_cfa(efa4,
names=c("Var1", "Var2", "Var3", "Var4"),
threshold = "max"), data=data)
tidySEM::graph_sem(cfa4)
cfa4 <- lavaan::cfa(parameters::efa_to_cfa(efa4,
names=c("Var1", "Var2", "Var3", "Elimination"),
threshold = "max"), data=data)
tidySEM::graph_sem(cfa4)
tidySEM::prepare_graph(cfa4)
tidySEM::prepare_graph(cfa4) |>
plot()
tidySEM::graph_sem(cfa4, variance_diameter=NULL)
tidySEM::graph_sem(cfa4, variance_diameter=NA)
tidySEM::graph_sem(cfa4, layout="layout_as_star", variance_diameter=NA)
tidySEM::graph_sem(cfa4,
layout=get_layout(cfa4, ayout_algorithm = "layout_as_star"),
variance_diameter=NA)
tidySEM::graph_sem(cfa4,
layout=get_layout(cfa4, ayout_algorithm = "layout_in_circle"),
variance_diameter=NA)
tidySEM::graph_sem(cfa4,
layout=get_layout(cfa4, layout_algorithm = "layout_in_circle"),
variance_diameter=NA)
tidySEM::graph_sem(cfa4,
layout=get_layout(cfa4, layout_algorithm = "layout_as_star"),
variance_diameter=NA)
tidySEM::graph_sem(cfa4,
layout=get_layout(cfa4, layout_algorithm = "layout_with_graphopt"),
variance_diameter=NA)
tidySEM::graph_sem(cfa4,
layout=get_layout(cfa4, layout_algorithm = "layout_nicely"),
variance_diameter=NA)
tidySEM::graph_sem(cfa4,
layout=get_layout(cfa4, layout_algorithm = "layout_in_circle"),
variance_diameter=NA)
tidySEM::graph_sem(cfa4,
layout=get_layout(cfa4, layout_algorithm = "layout_with_fr"),
variance_diameter=NA)
tidySEM::graph_sem(cfa4,
layout=get_layout(cfa4, layout_algorithm = "layout_with_fr"),
variance_diameter=NA)
tidySEM::graph_sem(cfa4,
layout=get_layout(cfa4, layout_algorithm = "layout_with_graphopt"),
variance_diameter=NA)
tidySEM::graph_sem(cfa4,
layout=get_layout(cfa4, layout_algorithm = "layout_with_graphopt"),
variance_diameter=NA)
tidySEM::graph_sem(cfa4,
layout=get_layout(cfa4, layout_algorithm = "layout_with_lgl"),
variance_diameter=NA)
tidySEM::graph_sem(cfa4,
layout=get_layout(cfa4, layout_algorithm = "layout_with_lgl"),
variance_diameter=NA)
tidySEM::graph_sem(cfa4,
layout=get_layout(cfa4, layout_algorithm = "layout_with_kk"),
variance_diameter=NA)
ut(cfa4, layout_algorithm = "layout_with_kk"
tidySEM::graph_sem(cfa4,
tidySEM::graph_sem(cfa4,
layout=get_layout(cfa4, layout_algorithm = "layout_with_kk"),
variance_diameter=NA)
tidySEM::prepare_graph(cfa4,
layout=get_layout(cfa4, layout_algorithm = "layout_with_kk"),
variance_diameter=NA) |>
plot()
tidySEM::prepare_graph(cfa4,
layout=get_layout(cfa4, layout_algorithm = "layout_with_kk"),
variance_diameter=NA) |>
edit_graph({ edge_color = "blue" }) |>
plot()
tidySEM::prepare_graph(cfa4,
layout=get_layout(cfa4, layout_algorithm = "layout_with_kk"),
variance_diameter=NA)
tidySEM::prepare_graph(cfa4,
layout=get_layout(cfa4, layout_algorithm = "layout_with_kk"),
variance_diameter=NA) |>
tidySEM::edit_graph({ edges_color = "blue" }) |>
plot()
graph_data <- tidySEM::prepare_graph(cfa4,
layout=get_layout(cfa4, layout_algorithm = "layout_with_kk"),
variance_diameter=NA)
edges(graph_data)
nodes(graph_data)
graph_data |>
tidySEM::edit_graph({ nodes_color = "blue" }) |>
plot(graph_data)
graph_data |>
tidySEM::edit_graph({ node_color = "blue" }) |>
plot(graph_data)
nodes(graph_data) |>
mutate(fill = "blue") |>
plot()
nodes(graph_data) |>
mutate(fill = "blue")
nodes(graph_data) <- nodes(graph_data)|>
mutate(fill = "blue")
plot(graph_data)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", NA, "grey") )
plot(graph_data)
cfa4 <- lavaan::cfa(parameters::efa_to_cfa(efa4,
names=c("Skin", "Expulsion", "Interoception", "Elimination"),
threshold = "max"), data=data)
anova(cfa1, cfa4)
cfa1 <- lavaan::cfa(parameters::efa_to_cfa(efa1,
names="IAS"), data=data)
cfa4 <- lavaan::cfa(parameters::efa_to_cfa(efa4,
names=c("Skin", "Expulsion", "Interoception", "Elimination"),
threshold = "max"), data=data)
graph_data <- tidySEM::prepare_graph(cfa4,
layout=get_layout(cfa4, layout_algorithm = "layout_with_kk"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", NA, "grey") )
plot(graph_data)
parameters::efa_to_cfa(efa4,
names=c("Skin", "Expulsion", "Interoception", "Elimination")
,
threshold = "max")
cfa4 <- "
Skin =~ Blood_Sugar + Affective_touch + Tickle + Itch
Expulsion =~ Sneeze + Cough + Wind + Burp
Interoception =~ Heart + Hungry + Breathing + Thirsty + Temp + Sex_arousal + Muscles + Bruise + Pain
Elimination =~ Urinate + Defecate + Taste + Vomit
" |>
lavaan::cfa(data=data)
cfa4mod <- "
Skin =~ Affective_touch + Tickle + Itch
Expulsion =~ Sneeze + Cough + Wind + Burp
Interoception =~ Heart + Hungry + Breathing + Thirsty + Temp + Sex_arousal + Muscles + Bruise + Pain
Elimination =~ Urinate + Defecate + Vomit
" |>
lavaan::cfa(data=data)
cfa1 <- lavaan::cfa(parameters::efa_to_cfa(efa1,
names="IAS"), data=data)
cfa4 <- lavaan::cfa(parameters::efa_to_cfa(efa4,
names=c("Skin", "Expulsion", "Interoception", "Elimination"),
threshold = "max"), data=data)
cfa4mod <- "
Skin =~ Affective_touch + Tickle + Itch
Expulsion =~ Sneeze + Cough + Wind + Burp
Interoception =~ Heart + Hungry + Breathing + Thirsty + Temp + Sex_arousal + Muscles + Bruise + Pain
Elimination =~ Urinate + Defecate + Vomit
" |>
lavaan::cfa(data=data)
anova(cfa1, cfa4, cfa4mod)
cfa5 <- "
Skin =~ Affective_touch + Tickle + Itch
Expulsion =~ Sneeze + Cough + Wind + Burp
Interoception =~ Heart + Hungry + Breathing + Thirsty + Temp + Sex_arousal
Pain =~ Muscles + Bruise + Pain
Elimination =~ Urinate + Defecate + Vomit
" |>
lavaan::cfa(data=data)
cfa5 <- "
Skin =~ Affective_touch + Tickle + Itch
Expulsion =~ Sneeze + Cough + Wind + Burp
Interoception =~ Heart + Hungry + Breathing + Thirsty + Temp + Sex_arousal
Nociception =~ Muscles + Bruise + Pain
Elimination =~ Urinate + Defecate + Vomit
" |>
lavaan::cfa(data=data)
anova(cfa1, cfa4, cfa4mod, cfa5)
modindices(cfa5, sort = TRUE, maximum.number = 5)
modindices(cfa5, sort = TRUE)
modindices(cfa5, sort = TRUE, maximum.number = 10)
modindices(cfa5, sort = TRUE, maximum.number = 10) |>
filter(op == "=~")
modindices(cfa5, sort = TRUE) |>
filter(op == "=~") |>
head()
cfa5mod <- "
Skin =~ Tickle + Itch
Expulsion =~ Sneeze + Cough + Wind + Burp
Interoception =~ Heart + Hungry + Breathing + Thirsty + Temp + Affective_touch + Sex_arousal
Nociception =~ Muscles + Bruise + Pain
Elimination =~ Urinate + Defecate + Vomit
" |>
lavaan::cfa(data=data)
anova(cfa5, cfa5mod)
cfa5mod <- "
Skin =~ Tickle + Itch
Expulsion =~ Sneeze + Cough + Wind + Burp
Interoception =~ Heart + Hungry + Breathing + Thirsty + Temp + Affective_touch + Sex_arousal
Nociception =~ Muscles + Bruise + Pain
Elimination =~ Urinate + Defecate + Vomit
" |>
lavaan::cfa(data=data)
anova(cfa5, cfa5mod)
library(tidySEM)
graph_data <- tidySEM::prepare_graph(cfa5,
layout=get_layout(cfa5, layout_algorithm = "layout_with_kk"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
anova(cfa5, cfa5mod)
cfa5mod <- "
Skin =~ Affective_touch + Tickle + Itch
Expulsion =~ Sneeze + Wind + Burp
Interoception =~ Heart + Hungry + Breathing + Thirsty + Temp + Sex_arousal
Nociception =~ Muscles + Bruise + Pain
Elimination =~ Urinate + Defecate + Vomit
" |>
lavaan::cfa(data=data)
anova(cfa5, cfa5mod)
items <- c(
"1. *(Interoception)* I can always accurately perceive when my heart is beating fast",
"2. *(Interoception)* I can always accurately perceive when I am hungry"
)
sample(items)
cat(sample(items))
cat(paste0(sample(items), collapse = "\n"))
styler:::style_active_file()
items <- c(
"*(Interoception)* I can always accurately perceive when my heart is beating fast",
"*(Interoception)* I can always accurately perceive when I am hungry",
"*(Interoception)* I can always accurately perceive when I am breathing fast",
"*(Interoception)* I can always accurately perceive when I am thirsty",
"*(Elimination)* I can always accurately perceive when I need to urinate",
"*(Elimination)* I can always accurately perceive when I need to defecate",
"*(Elimination)* I can always accurately perceive when I am going to vomit",
"*(Expulsion)* I can always accurately perceive when I am going to sneeze",
"*(Interoception)* I can always accurately perceive when I am hot/cold",
"*(Interoception)* I can always accurately perceive when I am sexually aroused",
"*(Expulsion)* I can always accurately perceive when I am going to pass wind",
"*(Expulsion)* I can always accurately perceive when I am going to burp",
"*(Nociception)* I can always accurately perceive when my muscles are tired/sore",
"*(Nociception)* I can always accurately perceive when I am going to get a bruise",
"*(Nociception)* I can always accurately perceive when I am in pain",
"*(Skin)* I can always accurately perceive when someone is touching me affectionately rather than non-affectionately",
"*(Skin)* I can always accurately perceive when something is going to be ticklish",
"*(Skin)* I can always accurately perceive when something is going to be itchy"
)
items <- c(
"*(Interoception)* I can always accurately perceive when my heart is beating fast",
"*(Interoception)* I can always accurately perceive when I am hungry",
"*(Interoception)* I can always accurately perceive when I am breathing fast",
"*(Interoception)* I can always accurately perceive when I am thirsty",
"*(Elimination)* I can always accurately perceive when I need to urinate",
"*(Elimination)* I can always accurately perceive when I need to defecate",
"*(Elimination)* I can always accurately perceive when I am going to vomit",
"*(Expulsion)* I can always accurately perceive when I am going to sneeze",
"*(Interoception)* I can always accurately perceive when I am hot/cold",
"*(Interoception)* I can always accurately perceive when I am sexually aroused",
"*(Expulsion)* I can always accurately perceive when I am going to pass wind",
"*(Expulsion)* I can always accurately perceive when I am going to burp",
"*(Nociception)* I can always accurately perceive when my muscles are tired/sore",
"*(Nociception)* I can always accurately perceive when I am going to get a bruise",
"*(Nociception)* I can always accurately perceive when I am in pain",
"*(Skin)* I can always accurately perceive when someone is touching me affectionately rather than non-affectionately",
"*(Skin)* I can always accurately perceive when something is going to be ticklish",
"*(Skin)* I can always accurately perceive when something is going to be itchy"
) |>
sample()
items
items <- c(
"*(Interoception)* I can always accurately perceive when my heart is beating fast",
"*(Interoception)* I can always accurately perceive when I am hungry",
"*(Interoception)* I can always accurately perceive when I am breathing fast",
"*(Interoception)* I can always accurately perceive when I am thirsty",
"*(Elimination)* I can always accurately perceive when I need to urinate",
"*(Elimination)* I can always accurately perceive when I need to defecate",
"*(Elimination)* I can always accurately perceive when I am going to vomit",
"*(Expulsion)* I can always accurately perceive when I am going to sneeze",
"*(Interoception)* I can always accurately perceive when I am hot/cold",
"*(Interoception)* I can always accurately perceive when I am sexually aroused",
"*(Expulsion)* I can always accurately perceive when I am going to pass wind",
"*(Expulsion)* I can always accurately perceive when I am going to burp",
"*(Nociception)* I can always accurately perceive when my muscles are tired/sore",
"*(Nociception)* I can always accurately perceive when I am going to get a bruise",
"*(Nociception)* I can always accurately perceive when I am in pain",
"*(Skin)* I can always accurately perceive when someone is touching me affectionately rather than non-affectionately",
"*(Skin)* I can always accurately perceive when something is going to be ticklish",
"*(Skin)* I can always accurately perceive when something is going to be itchy"
)
cat(paste0(items, collapse = "\n"))
paste0(items, collapse = "\n")
paste0(1:18, items, collapse = "\n")
cat(paste0(1:18, ". ", items, collapse = "\n"))
