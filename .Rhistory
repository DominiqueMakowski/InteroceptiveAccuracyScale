Nociception =~ Muscles + Bruise + Pain
Elimination =~ Urinate + Defecate + Vomit
" |>
lavaan::cfa(data=data)
anova(cfa5, cfa5mod)
items <- c(
"1. *(Interoception)* I can always accurately perceive when my heart is beating fast",
"2. *(Interoception)* I can always accurately perceive when I am hungry"
)
sample(items)
cat(sample(items))
cat(paste0(sample(items), collapse = "\n"))
styler:::style_active_file()
items <- c(
"*(Interoception)* I can always accurately perceive when my heart is beating fast",
"*(Interoception)* I can always accurately perceive when I am hungry",
"*(Interoception)* I can always accurately perceive when I am breathing fast",
"*(Interoception)* I can always accurately perceive when I am thirsty",
"*(Elimination)* I can always accurately perceive when I need to urinate",
"*(Elimination)* I can always accurately perceive when I need to defecate",
"*(Elimination)* I can always accurately perceive when I am going to vomit",
"*(Expulsion)* I can always accurately perceive when I am going to sneeze",
"*(Interoception)* I can always accurately perceive when I am hot/cold",
"*(Interoception)* I can always accurately perceive when I am sexually aroused",
"*(Expulsion)* I can always accurately perceive when I am going to pass wind",
"*(Expulsion)* I can always accurately perceive when I am going to burp",
"*(Nociception)* I can always accurately perceive when my muscles are tired/sore",
"*(Nociception)* I can always accurately perceive when I am going to get a bruise",
"*(Nociception)* I can always accurately perceive when I am in pain",
"*(Skin)* I can always accurately perceive when someone is touching me affectionately rather than non-affectionately",
"*(Skin)* I can always accurately perceive when something is going to be ticklish",
"*(Skin)* I can always accurately perceive when something is going to be itchy"
)
items <- c(
"*(Interoception)* I can always accurately perceive when my heart is beating fast",
"*(Interoception)* I can always accurately perceive when I am hungry",
"*(Interoception)* I can always accurately perceive when I am breathing fast",
"*(Interoception)* I can always accurately perceive when I am thirsty",
"*(Elimination)* I can always accurately perceive when I need to urinate",
"*(Elimination)* I can always accurately perceive when I need to defecate",
"*(Elimination)* I can always accurately perceive when I am going to vomit",
"*(Expulsion)* I can always accurately perceive when I am going to sneeze",
"*(Interoception)* I can always accurately perceive when I am hot/cold",
"*(Interoception)* I can always accurately perceive when I am sexually aroused",
"*(Expulsion)* I can always accurately perceive when I am going to pass wind",
"*(Expulsion)* I can always accurately perceive when I am going to burp",
"*(Nociception)* I can always accurately perceive when my muscles are tired/sore",
"*(Nociception)* I can always accurately perceive when I am going to get a bruise",
"*(Nociception)* I can always accurately perceive when I am in pain",
"*(Skin)* I can always accurately perceive when someone is touching me affectionately rather than non-affectionately",
"*(Skin)* I can always accurately perceive when something is going to be ticklish",
"*(Skin)* I can always accurately perceive when something is going to be itchy"
) |>
sample()
items
items <- c(
"*(Interoception)* I can always accurately perceive when my heart is beating fast",
"*(Interoception)* I can always accurately perceive when I am hungry",
"*(Interoception)* I can always accurately perceive when I am breathing fast",
"*(Interoception)* I can always accurately perceive when I am thirsty",
"*(Elimination)* I can always accurately perceive when I need to urinate",
"*(Elimination)* I can always accurately perceive when I need to defecate",
"*(Elimination)* I can always accurately perceive when I am going to vomit",
"*(Expulsion)* I can always accurately perceive when I am going to sneeze",
"*(Interoception)* I can always accurately perceive when I am hot/cold",
"*(Interoception)* I can always accurately perceive when I am sexually aroused",
"*(Expulsion)* I can always accurately perceive when I am going to pass wind",
"*(Expulsion)* I can always accurately perceive when I am going to burp",
"*(Nociception)* I can always accurately perceive when my muscles are tired/sore",
"*(Nociception)* I can always accurately perceive when I am going to get a bruise",
"*(Nociception)* I can always accurately perceive when I am in pain",
"*(Skin)* I can always accurately perceive when someone is touching me affectionately rather than non-affectionately",
"*(Skin)* I can always accurately perceive when something is going to be ticklish",
"*(Skin)* I can always accurately perceive when something is going to be itchy"
)
cat(paste0(items, collapse = "\n"))
paste0(items, collapse = "\n")
paste0(1:18, items, collapse = "\n")
cat(paste0(1:18, ". ", items, collapse = "\n"))
report_participants
setwd("C:/Dropbox/PERSO/github/InteroceptiveAccuracyScale")
library(tidyverse)
library(easystats)
df <- haven::read_sav("Study 1.sav") |>
mutate_all(as.numeric) |>
mutate(Gender = as.character(ifelse(Gender == 1, "Male", "Female")))
report::report_participants(df, age = "Age", sex = NA, gender = "Gender")
paste0(
"Data from the [study 1](https://osf.io/3m5nh/?view_only=a68051df4abe4ecb992f22dc8c17f769), downloaded from OSF, included ",
report::report_participants(df, age = "Age", sex = NA, gender = "Gender")
)
paste0(
"Data from the [study 1](https://osf.io/3m5nh/?view_only=a68051df4abe4ecb992f22dc8c17f769), downloaded from OSF, included ",
report::report_participants(df, age = "Age", sex = NA, gender = "Gender"),
"."
)
data <- select(df, -Age, -Gender)
n <- parameters::n_factors(data)
n
plot(n)
library(lavaan)
cfa1 <- lavaan::cfa(parameters::efa_to_cfa(efa1,
names="IAS"), data=data)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
dpi = 450,
fig.path = "figures/",
comment = "#",
message = FALSE,
warning = FALSE
)
options(
knitr.kable.NA = "",
digits = 4,
width = 80
)
# Chunk 2
library(tidyverse)
library(easystats)
df <- haven::read_sav("Study 1.sav") |>
mutate_all(as.numeric) |>
mutate(Gender = as.character(ifelse(Gender == 1, "Male", "Female")))
paste0(
"Data from the [study 1](https://osf.io/3m5nh/?view_only=a68051df4abe4ecb992f22dc8c17f769) (Murphy et al., 2020), downloaded from OSF, included ",
report::report_participants(df, age = "Age", sex = NA, gender = "Gender"),
"."
)
# Chunk 3
data <- select(df, -Age, -Gender)
n <- parameters::n_factors(data)
n
plot(n)
# Chunk 4
efa1 <- parameters::factor_analysis(data, n=1, sort = TRUE)
efa1
efa4 <- parameters::factor_analysis(data, n=4, rotation = "oblimin", sort = TRUE)
efa4
library(lavaan)
cfa1 <- lavaan::cfa(parameters::efa_to_cfa(efa1,
names="IAS"), data=data)
cfa4 <- lavaan::cfa(parameters::efa_to_cfa(efa4,
names=c("Skin", "Expulsion", "Interoception", "Elimination"),
threshold = "max"), data=data)
anova(cfa1, cfa4)
cfa4mod <- "
Skin =~ Affective_touch + Tickle + Itch
Expulsion =~ Sneeze + Cough + Wind + Burp
Interoception =~ Heart + Hungry + Breathing + Thirsty + Temp + Sex_arousal + Muscles + Bruise + Pain
Elimination =~ Urinate + Defecate + Vomit
" |>
lavaan::cfa(data=data)
cfa5 <- "
Skin =~ Affective_touch + Tickle + Itch
Expulsion =~ Sneeze + Cough + Wind + Burp
Interoception =~ Heart + Hungry + Breathing + Thirsty + Temp + Sex_arousal
Nociception =~ Muscles + Bruise + Pain
Elimination =~ Urinate + Defecate + Vomit
" |>
lavaan::cfa(data=data)
anova(cfa4, cfa4mod, cfa5)
cfa5mod <- "
Skin =~ Affective_touch + Tickle + Itch
Expulsion =~ Sneeze + Wind + Burp
Interoception =~ Heart + Hungry + Breathing + Thirsty + Temp + Sex_arousal
Nociception =~ Muscles + Bruise + Pain
Elimination =~ Urinate + Defecate + Vomit
" |>
lavaan::cfa(data=data)
anova(cfa5, cfa5mod)
performance::performance(cfa5) |>
display()
performance::performance(cfa5mod) |>
display()
parameters::parameters(cfa5mod) |>
display()
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
dpi = 450,
fig.path = "figures/",
comment = "#",
message = FALSE,
warning = FALSE
)
options(
knitr.kable.NA = "",
digits = 4,
width = 80
)
# Chunk 2
library(tidyverse)
library(easystats)
df <- haven::read_sav("Study 1.sav") |>
mutate_all(as.numeric) |>
mutate(Gender = as.character(ifelse(Gender == 1, "Male", "Female")))
paste0(
"Data from the [study 1](https://osf.io/3m5nh/?view_only=a68051df4abe4ecb992f22dc8c17f769) (Murphy et al., 2020), downloaded from OSF, included ",
report::report_participants(df, age = "Age", sex = NA, gender = "Gender"),
"."
)
# Chunk 3
data <- select(df, -Age, -Gender)
n <- parameters::n_factors(data)
n
plot(n)
# Chunk 4
efa1 <- parameters::factor_analysis(data, n=1, sort = TRUE)
efa1
efa4 <- parameters::factor_analysis(data, n=4, rotation = "oblimin", sort = TRUE)
efa4
# Chunk 5
library(lavaan)
cfa1 <- lavaan::cfa(parameters::efa_to_cfa(efa1,
names="IAS"), data=data)
cfa4 <- lavaan::cfa(parameters::efa_to_cfa(efa4,
names=c("Skin", "Expulsion", "Interoception", "Elimination"),
threshold = "max"), data=data)
anova(cfa1, cfa4)
# Chunk 6
cfa4mod <- "
Skin =~ Affective_touch + Tickle + Itch
Expulsion =~ Sneeze + Cough + Wind + Burp
Interoception =~ Heart + Hungry + Breathing + Thirsty + Temp + Sex_arousal + Muscles + Bruise + Pain
Elimination =~ Urinate + Defecate + Vomit
" |>
lavaan::cfa(data=data)
cfa5 <- "
Skin =~ Affective_touch + Tickle + Itch
Expulsion =~ Sneeze + Cough + Wind + Burp
Interoception =~ Heart + Hungry + Breathing + Thirsty + Temp + Sex_arousal
Nociception =~ Muscles + Bruise + Pain
Elimination =~ Urinate + Defecate + Vomit
" |>
lavaan::cfa(data=data)
anova(cfa4, cfa4mod, cfa5)
# Chunk 7
cfa5mod <- "
Skin =~ Affective_touch + Tickle + Itch
Expulsion =~ Sneeze + Wind + Burp
Interoception =~ Heart + Hungry + Breathing + Thirsty + Temp + Sex_arousal
Nociception =~ Muscles + Bruise + Pain
Elimination =~ Urinate + Defecate + Vomit
" |>
lavaan::cfa(data=data)
anova(cfa5, cfa5mod)
library(tidySEM)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_with_kk"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_with_lgl"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_with_mds"),
variance_diameter=NA)
plot(graph_data)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_as_star"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
plot(graph_data)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_nicely"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_nicely"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_as_tree"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
raph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_with_dh"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_with_dh"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_with_dh"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_with_fr"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_with_fr"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_with_gem"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_with_gem"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_with_graphopt"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_with_kk"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_with_lgl"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_with_lgl"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_with_lgl"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_with_mds"),
variance_diameter=NA)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_with_kk"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_in_circle"),
variance_diameter=NA)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_in_circle"),
variance_diameter=NA)
df <- haven::read_sav("Study 6 IAS.sav") |>
mutate_all(as.numeric) |>
mutate(Gender = as.character(ifelse(Gender == 1, "Male", "Female")))
library(tidyverse)
setwd("C:/Dropbox/PERSO/github/InteroceptiveAccuracyScale")
df <- haven::read_sav("Study 6 IAS.sav") |>
mutate_all(as.numeric) |>
mutate(Gender = as.character(ifelse(Gender == 1, "Male", "Female")))
df
df <- haven::read_sav("Study 1.sav")
summary(df$Gender)
df[df$Gender == 3]
df[df$Gender == 3,]
df <- haven::read_sav("Study 6 IAS.sav") |>
mutate_all(as.numeric) |>
mutate(Gender = as.character(ifelse(Gender == 1, "Male", ifelse(Gender == 2, "Female", "Other"))))
df2 <- haven::read_sav("Study 6 IAS.sav") |>
mutate_all(as.numeric) |>
mutate(Gender = as.character(ifelse(Gender == 1, "Male", ifelse(Gender == 2, "Female", "Other"))))
paste0(
"Data from the [study 6](https://osf.io/3m5nh/?view_only=a68051df4abe4ecb992f22dc8c17f769) (Murphy et al., 2020), downloaded from OSF, included ",
report::report_participants(df2, age = "Age", sex = NA, gender = "Gender"),
"."
)
cfa5_refit <- update(cfa5mod, data=df2)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
dpi = 450,
fig.path = "figures/",
comment = "#",
message = FALSE,
warning = FALSE
)
options(
knitr.kable.NA = "",
digits = 4,
width = 80
)
# Chunk 2
library(tidyverse)
library(easystats)
df <- haven::read_sav("Study 1.sav") |>
mutate_all(as.numeric) |>
mutate(Gender = as.character(ifelse(Gender == 1, "Male", ifelse(Gender == 2, "Female", "Other"))))
paste0(
"Data from the [study 1](https://osf.io/3m5nh/?view_only=a68051df4abe4ecb992f22dc8c17f769) (Murphy et al., 2020), downloaded from OSF, included ",
report::report_participants(df, age = "Age", sex = NA, gender = "Gender"),
"."
)
# Chunk 3
data <- select(df, -Age, -Gender)
n <- parameters::n_factors(data)
n
plot(n)
# Chunk 4
efa1 <- parameters::factor_analysis(data, n=1, sort = TRUE)
efa1
efa4 <- parameters::factor_analysis(data, n=4, rotation = "oblimin", sort = TRUE)
efa4
# Chunk 5
library(lavaan)
cfa1 <- lavaan::cfa(parameters::efa_to_cfa(efa1,
names="IAS"), data=data)
cfa4 <- lavaan::cfa(parameters::efa_to_cfa(efa4,
names=c("Skin", "Expulsion", "Interoception", "Elimination"),
threshold = "max"), data=data)
anova(cfa1, cfa4)
# Chunk 6
cfa4mod <- "
Skin =~ Affective_touch + Tickle + Itch
Expulsion =~ Sneeze + Cough + Wind + Burp
Interoception =~ Heart + Hungry + Breathing + Thirsty + Temp + Sex_arousal + Muscles + Bruise + Pain
Elimination =~ Urinate + Defecate + Vomit
" |>
lavaan::cfa(data=data)
cfa5 <- "
Skin =~ Affective_touch + Tickle + Itch
Expulsion =~ Sneeze + Cough + Wind + Burp
Interoception =~ Heart + Hungry + Breathing + Thirsty + Temp + Sex_arousal
Nociception =~ Muscles + Bruise + Pain
Elimination =~ Urinate + Defecate + Vomit
" |>
lavaan::cfa(data=data)
anova(cfa4, cfa4mod, cfa5)
# Chunk 7
cfa5mod <- "
Skin =~ Affective_touch + Tickle + Itch
Expulsion =~ Sneeze + Wind + Burp
Interoception =~ Heart + Hungry + Breathing + Thirsty + Temp + Sex_arousal
Nociception =~ Muscles + Bruise + Pain
Elimination =~ Urinate + Defecate + Vomit
" |>
lavaan::cfa(data=data)
anova(cfa5, cfa5mod)
cfa5_refit <- update(cfa5mod, data=df2)
cfa5_refit
cfa5mod_refit <- update(cfa5mod, data=df2)
cfa5mod_refit <- update(cfa5mod, data=df2)
cfa5_refit <- update(cfa5, data=df2)
cfa4mod_refit <- update(cfa4mod, data=df2)
anova(cfa5mod_refit, cfa5_refit, cfa4mod_refit)
final <- update(cfa5mod, data = datawizard::data_merge(df, df2, join="bind"))
library(tidySEM)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_with_kk"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
performance::performance(cfa5mod) |>
display()
parameters::parameters(cfa5mod) |>
display()
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_with_nicely"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_nicely"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_nicely"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
graph_data <- tidySEM::prepare_graph(cfa5mod,
layout=get_layout(cfa5mod, layout_algorithm = "layout_nicely"),
variance_diameter=NA)
nodes(graph_data) <- nodes(graph_data) |>
mutate(fill = ifelse(shape == "rect", "grey", "#F06292"))
plot(graph_data)
